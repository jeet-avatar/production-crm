name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  deploy:
    name: Build and Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Build Backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build

      - name: Build Frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://brandmonkz.com
        run: |
          npm ci
          npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy

          # Backend files
          cp -r backend/dist deploy/backend-dist
          cp -r backend/node_modules deploy/backend-node_modules
          cp backend/package.json deploy/
          cp backend/prisma deploy/prisma -r

          # Frontend build
          cp -r frontend/dist deploy/frontend-dist

          # Create deployment script
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment..."

          # Backend deployment
          echo "📦 Deploying backend..."
          sudo rm -rf /var/www/crm-backend/backend/dist
          sudo cp -r backend-dist /var/www/crm-backend/backend/dist
          sudo cp -r backend-node_modules /var/www/crm-backend/backend/node_modules
          sudo cp package.json /var/www/crm-backend/backend/
          sudo cp -r prisma /var/www/crm-backend/backend/

          # Set permissions
          sudo chown -R ec2-user:ec2-user /var/www/crm-backend/backend

          # Restart backend
          cd /var/www/crm-backend/backend
          pm2 restart crm-backend

          echo "✅ Backend deployed and restarted"

          # Frontend deployment
          echo "📦 Deploying frontend..."
          sudo rm -rf /var/www/brandmonkz/*
          sudo cp -r frontend-dist/* /var/www/brandmonkz/
          sudo chown -R nginx:nginx /var/www/brandmonkz

          echo "✅ Frontend deployed"

          # Health check
          echo "🏥 Running health check..."
          sleep 3
          curl -f http://localhost:3000/health || exit 1

          echo "🎉 Deployment completed successfully!"
          EOF

          chmod +x deploy/deploy.sh

          # Create tarball
          tar -czf deploy-package.tar.gz -C deploy .

      - name: Upload to EC2 and Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Add EC2 to known hosts
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          # Upload deployment package
          scp -i ~/.ssh/deploy_key deploy-package.tar.gz $EC2_USER@$EC2_HOST:/tmp/

          # Execute deployment on EC2
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST << 'ENDSSH'
            cd /tmp
            rm -rf deploy-temp
            mkdir -p deploy-temp
            tar -xzf deploy-package.tar.gz -C deploy-temp
            cd deploy-temp
            bash deploy.sh
            cd /tmp
            rm -rf deploy-temp deploy-package.tar.gz
          ENDSSH

      - name: Verify Deployment
        env:
          PRODUCTION_URL: https://brandmonkz.com
        run: |
          echo "🔍 Verifying deployment..."

          # Wait for services to stabilize
          sleep 10

          # Check API health
          response=$(curl -s -o /dev/null -w "%{http_code}" $PRODUCTION_URL/health)
          if [ "$response" != "200" ]; then
            echo "❌ Health check failed with status $response"
            exit 1
          fi

          echo "✅ Deployment verified successfully!"

      - name: Notify on Success
        if: success()
        run: |
          echo "🎉 Deployment to production completed successfully!"
          echo "✅ Backend: https://brandmonkz.com/health"
          echo "✅ Frontend: https://brandmonkz.com"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Please check the logs."
          echo "🔍 Rolling back may be required."
